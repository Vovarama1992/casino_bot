from fastapi import FastAPI, HTTPException, Response
from contextlib import asynccontextmanager
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, FSInputFile
from aiogram.client.bot import DefaultBotProperties
from aiogram.filters.command import Command
import aiohttp
import aiofiles
import json

# –£—Å—Ç–∞–Ω–æ–≤–∏–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

bot = Bot(token="7326667914:AAGaGAIQKH_-tzGQMnWFis2ZFIddWvXVvfU", default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()
app = FastAPI()

ids = []

start_img = FSInputFile(path="start.jpg")

@app.get("/photo/{uid}")
async def get_photo(uid: int):
    logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {uid}")
    try:
        photos = await bot.get_user_profile_photos(uid)
        if photos.photos:
            url = f"https://api.telegram.org/file/bot{bot.token}/{(await bot.get_file(photos.photos[0][0].file_id)).file_path}"
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    return Response(content=(await resp.read()), status_code=resp.status)
        else:
            raise HTTPException(status_code=404, detail="–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except BaseException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–æ—Ç–æ: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

kb = [
    [
        InlineKeyboardButton(text='Play', web_app=WebAppInfo(url=f'https://lotos.na4u.ru/'))
    ]
]

async def process_message(message: Message):
    uid = message.from_user.id
    if uid not in ids:
        ids.append(uid)
        async with aiofiles.open("udata.txt", mode="w") as file:
            await file.write(json.dumps(ids))
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {message.text}")

@dp.message(Command("start"))
async def cmd_start(message: Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await process_message(message)
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer_photo(start_img, caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ –ø–µ—Ä–≤–æ–µ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–∞–∑–∏–Ω–æ Telegram –≤ –º–∏—Ä–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ lotos.na4u.ru! üí• –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "–ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å!" –∏ –ø–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –æ–ø—ã—Ç Lotos - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –∫–∞–∑–∏–Ω–æ. ü§ë', reply_markup=markup)

@dp.message()
async def other(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}: {message.text}")
    await process_message(message)
    if message.from_user.username in ["beusefu11"]:
        for _id in ids:
            try:
                await bot.send_message(chat_id=_id, text=message.html_text, parse_mode="HTML")
            except BaseException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                pass

@asynccontextmanager
async def lifespan(app: FastAPI):
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    el = asyncio.get_running_loop()
    el.create_task(dp.start_polling(bot))
    yield  # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
app = FastAPI(lifespan=lifespan)

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ FastAPI - uvicorn

